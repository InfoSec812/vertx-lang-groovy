@comment{'various stuff'}
@includeNamed{'/vertx-java/template/common-lib.templ'}
@code{

  /**
   * Render a relative html link to the dataObjectType from the current type.
   */
  def renderDataObjectHtmlLink(dataObjectType) {
    var link = new StringBuilder();
    for (name : CASE_QUALIFIED.parse(type.raw.getPackageName())) {
      link.append("../");
    }
    link.append("../../../cheatsheet/").append(dataObjectType.simpleName).append(".html");
    return "<a href=\"" + link + "\">" + dataObjectType.simpleName + "</a>";;
  }

  def genGroovyDocType(type) {
    if (type.kind == CLASS_JSON_ARRAY) {
      return "java.util.List<Object>";
    } if (type.kind == CLASS_DATA_OBJECT || type.kind == CLASS_JSON_OBJECT) {
      return "java.util.Map<java.lang.String, java.lang.Object>";
    } else if (type.kind == CLASS_API) {
      return type.translateName("groovy");
    } else if (type.kind == CLASS_LIST || type.kind == CLASS_SET) {
      return type.raw.name + "<" + genGroovyDocType(type.args[0]) + ">";
    } else if (type.kind == CLASS_MAP) {
      return "java.util.Map<" + genGroovyDocType(type.args[0]) + "," + genGroovyDocType(type.args[1]) + ">";
    } else if (type.kind == CLASS_HANDLER) {
      return "io.vertx.core.Handler<" + genGroovyDocType(type.args[0]) + ">";
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      return "io.vertx.core.AsyncResult<" + genGroovyDocType(type.args[0]) + ">";
    } else {
      return type.name;
    }
  }

  /**
   * Render a tag link to an html link, this function is used as parameter of the
   * renderDocToHtml function when it needs to render tag links.
   */
  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    if (rawType.module != null) {
      var label = link.label.trim();
      if (rawType.kind == CLASS_DATA_OBJECT) {
        if (label.length() == 0) {
          label = rawType.simpleName;
        }
        return renderDataObjectHtmlLink(rawType);
      } else {
        if (type.kind == CLASS_API) {
          var elt = link.targetElement;
          var eltKind = elt.getKind().name();
          var ret = "{@link " + rawType.translateName("groovy");
          if (eltKind == "METHOD") {
            ret += "#" + elt.getSimpleName().toString();
          }
          if (label.length() > 0) {
            ret += " " + label;
          }
          ret += "}";
          return ret;
        }
      }
    }
    return "{@link " + rawType.name + "}";
  }

  def genConstructorType(type) {
    var fqn = type.translateName("groovy");
    if (type.concrete) {
      return fqn;
    } else {
      return fqn + "Impl";
    }
  }

  def genConstructor(type, arg) {
    return "new " + genConstructorType(type) + "(" + arg + ")";
  }
  
  def genConvReturnType(type) {
    var kind = type.kind;
    if (kind == CLASS_JSON_OBJECT || kind == CLASS_DATA_OBJECT) {
      return 'Map<String, Object>';
    } else if (kind == CLASS_JSON_ARRAY) {
      return 'List<Object>';
    } else if (kind == CLASS_LIST) {
      return 'List<' + genConvReturnType(type.args[0]) + '>';
    } else if (kind == CLASS_SET) {
      return 'Set<' + genConvReturnType(type.args[0]) + '>';
    } else if (kind == CLASS_MAP) {
      return 'Map<String, List<' + genConvReturnType(type.args[1]) + '>>';
    } else {
      return type.simpleName;
    }
  }

  function genInvokeDelegate(method) {
    var s = '';
    if (method.staticMethod) {
      s = type.raw.name;
    } else {
      if (method.ownerTypes.size() > 1) {
        /* Work around for https://jira.codehaus.org/browse/GROOVY-6970 */
        s = '((' + method.ownerTypes.iterator().next().name + ') delegate)';
      } else if (method.ownerTypes.iterator().next() == type && concrete) {
        s = 'delegate';
      } else {
        s = '((' + method.ownerTypes.iterator().next().name + ') delegate)';
      }
    }
    s = s + '.' + method.name + '(';
    var index = 0;
    for (param : method.params) {
      if (index > 0) {
        s = s + ', ';
      }
      var expr = genConvParam(param.type, param.name);
      if (param.type.kind == CLASS_PRIMITIVE) {
        s = s + expr;
      } else {
        s = s + param.name + ' != null ? ' + expr + ' : null';
      }
      index = index + 1;
    }
    s = s + ')';
    return s;
  }

  function genConvReturn(type, expr) {
    if (type.kind == CLASS_OBJECT) {
      /* This cast is cleary flawed */
      return '(' + type.simpleName + ') InternalHelper.wrapObject(' + expr + ')';
    } else if (type.kind == CLASS_API) {
      return 'InternalHelper.safeCreate(' + expr + ', ' + genConstructorType(type.raw) + '.class)';
    } else if (type.kind == CLASS_JSON_OBJECT) {
      return '(Map<String, Object>)InternalHelper.wrapObject(' + expr + ')';
    } else if (type.kind == CLASS_JSON_ARRAY) {
      return '(List<Object>)InternalHelper.wrapObject(' + expr + ')';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return '(Map<String, Object>)InternalHelper.wrapObject(' + expr + '?.toJson())';
    } else if (type.kind == CLASS_LIST || type.kind == CLASS_SET) {
      var eltType = type.args[0];
      var eltKind = eltType.kind;
      if (eltKind == CLASS_JSON_OBJECT || eltKind == CLASS_JSON_ARRAY || eltKind == CLASS_DATA_OBJECT || eltKind == CLASS_API) {
        var ret = expr + '?.collect({' + genConvReturn(eltType, 'it') + '})';
        if (type.kind == CLASS_SET) {
          ret = '(Set)' + ret + ' as Set';
        } else {
          ret = '(List)' + ret;
        }
        return ret;
      }
    } else if (type.kind == CLASS_MAP) {
      var eltType = type.args[1];
      var eltKind = eltType.kind;
      if (eltKind == CLASS_JSON_OBJECT || eltKind == CLASS_JSON_ARRAY || eltKind == CLASS_DATA_OBJECT || eltKind == CLASS_API) {
        return '(Map)' + expr + '?.collectEntries({[it.key,' + genConvReturn(eltType, 'it.value') + ']})';
      }
    } else if (type.kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      if (eventType.kind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        return 'new Handler<AsyncResult<' + resultType.erased.simpleName + '>>() {\n' +
               '      public void handle(AsyncResult<' + resultType.erased.simpleName + '> ar_) {\n' +
               '        if (ar_.succeeded()) {\n' +
               '          ' + expr + '.handle(io.vertx.core.Future.succeededFuture(' + genConvParam(resultType, 'ar_.result()') + '));\n' +
               '        } else  {\n' +
               '          ' + expr + '.handle(io.vertx.core.Future.failedFuture(ar_.cause()));\n' +
               '        }\n' +
               '      }\n' +
               '    }';
      } else {
        return 'new Handler<' + eventType.erased.simpleName + '>() {\n' +
               '      public void handle(' + eventType.erased.simpleName + ' event_) {\n' +
               '        ' + expr + '.handle(' + genConvParam(eventType, 'event_') + ');\n' +
               '      }\n' +
               '    }';
      }
    }
    return expr;
  }

  function genConvParam(type, expr) {
    if (type.kind == CLASS_DATA_OBJECT) {
      return 'new ' + type.name + '(new io.vertx.core.json.JsonObject(' + expr + '))';
    } else if (type.kind.json) {
      return 'new ' + type.name + '(' + expr + ')';
    } else if (type.kind == CLASS_API) {
      return '(' + type.name + ')' + expr + '.getDelegate()';
    } else if (type.kind == CLASS_OBJECT) {
      return 'InternalHelper.unwrapObject(' + expr + ')';
    } else if (type.kind == CLASS_LIST || type.kind == CLASS_SET) {
      var eltType = type.args[0];
      var ret = expr + '.collect({' + genConvParam(eltType, 'it') + '})';
      if (type.kind == CLASS_SET) {
        ret = '(Set)' + ret + ' as Set';
      } else {
        ret = '(List)' + ret;
      }
      return ret;
    } else if (type.kind == CLASS_MAP) {
      var eltType = type.args[1];
      return '(Map)' + expr + '.collectEntries({[it.key,' + genConvParam(eltType, 'it.value') + ']})';
    } else if (type.kind.basic || type.kind == CLASS_ENUM || type.kind == CLASS_THROWABLE) {
      return expr;
    } else if (type.kind == CLASS_HANDLER) {
      var eventType = type.args[0].erased;
      if (eventType.kind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        return 'new Handler<AsyncResult<' + resultType.name + '>>() {\n' +
               '      public void handle(AsyncResult<' + resultType.name + '> ar) {\n' +
               '        if (ar.succeeded()) {\n' +
               '          ' + expr + '.handle(io.vertx.core.Future.succeededFuture(' + genConvReturn(resultType, 'ar.result()') + '));\n' +
               '        } else {\n' +
               '          ' + expr + '.handle(io.vertx.core.Future.failedFuture(ar.cause()));\n' +
               '        }\n' +
               '      }\n' +
               '    }';
      } else {
        return 'new Handler<' + eventType.name + '>(){\n' +
               '      public void handle(' + eventType.name + ' event) {\n' +
               '        ' + expr + '.handle(' + genConvReturn(eventType, 'event') + ');\n' +
               '      }\n' +
               '    }';
      }
    }
    return 'null';
  }
}