	  final def @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && concreteSuperTypes.size() > 0}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	  }\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n

	@foreach{method:methods}
	@if{method.comment != null}
	  /**\n
	   *@{method.comment.replaceAll('\n(?!$)', '\n   *')}
	   */\n
	@end{}
	  public @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeVar:method.typeParams}@{typeVar}@end{', '}> @end{}@includeNamed{'returnTypeTemplate';returnType=method.returnType} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param;defaultOptions=defaultOptionsMap[method]}@end{', '}) {\n
	@if{method.fluent}
	    @includeNamed{'invokeDelegate';method=method};\n
			@if{method.returnType instanceof io.vertx.codegen.TypeInfo$Variable}
	    return (@{method.returnType.name}) this;\n
			@else{}
	    return this;\n
			@end{}
	@else{method.returnType.name.equals('void')}
	    @includeNamed{'invokeDelegate';method=method};\n
	@else{}
		@if{method.cacheReturn}
		    if (cached_@{cacheDecls.size()} != null) {\n
		      return cached_@{cacheDecls.size()};\n
		    }\n
		@end{}
		@if{method.returnType.kind == CLASS_OBJECT}
			@code{cachedType=method.returnType.simpleName}
		    // This cast is cleary flawed\n
		    def ret = (@{method.returnType.simpleName}) InternalHelper.wrapObject(@includeNamed{'invokeDelegate';method=method});\n
		@else{method.returnType.kind == CLASS_JSON_OBJECT}
			@code{cachedType='Map<String, Object>'}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.toMap();\n
		@else{method.returnType.kind == CLASS_JSON_ARRAY}
			@code{cachedType='List<Object>'}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.toList();\n
		@else{!method.returnType.name.startsWith('io.vertx.')}
			@code{cachedType=method.returnType.name}
		    def ret = @includeNamed{'invokeDelegate';method=method};\n
		@else{}
			@code{cachedType=method.returnType.simpleName}
		    def ret= @{method.returnType.raw.simpleName}.FACTORY.apply(@includeNamed{'invokeDelegate';method=method});\n
		@end{}
		@if{method.cacheReturn}
		    cached_@{cacheDecls.size()} = ret;\n
			@code{cacheDecls.add('private' + (method.staticMethod ? ' static' : '') + ' ' + cachedType + ' cached_' + cacheDecls.size())}
		@end{}
		    return ret;\n
		@end{}
	  }\n
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
