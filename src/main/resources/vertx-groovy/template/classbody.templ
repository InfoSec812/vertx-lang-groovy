	  final def @{type.raw} delegate;\n
	  public @{constructor}(@{type.raw} delegate) {\n
	@if{concrete && concreteSuperTypes.size() > 0}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	  }\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n

	@foreach{method:methods}
	@if{method.doc != null}
	  /**\n
	@{renderDocToHtml("   *", method.doc, renderLinkToHtml)}
	@foreach{param: method.params}
	   * @param @{param.name} @if{param.description != null}@{param.description}@end{}@if{param.type.kind == CLASS_DATA_OBJECT} (see @{renderDataObjectHtmlLink(param.type)})@end{}\n
	@end{}
	@if{!method.returnType.name.equals("void")}
	   * @return @if{method.returnDescription != null}@{method.returnDescription}@end{}@if{method.returnType.kind == CLASS_DATA_OBJECT} (see @{renderDataObjectHtmlLink(method.returnType)})@end{}\n
	@end{}
	   */\n
	@end{}
	  public @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeParam:method.typeParams}@{typeParam.name}@end{', '}> @end{}@includeNamed{'returnTypeTemplate';returnType=method.returnType} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param;defaultDataObject=defaultDataObjectMap[method]}@end{', '}) {\n
	@if{method.fluent}
	    @includeNamed{'invokeDelegate';method=method};\n
			@if{method.returnType instanceof io.vertx.codegen.TypeInfo$Variable}
	    return (@{method.returnType.name}) this;\n
			@else{}
	    return this;\n
			@end{}
	@else{method.returnType.name.equals('void')}
	    @includeNamed{'invokeDelegate';method=method};\n
	@else{}
		@if{method.cacheReturn}
		    if (cached_@{cacheDecls.size()} != null) {\n
		      return cached_@{cacheDecls.size()};\n
		    }\n
		@end{}
		@if{method.returnType.kind == CLASS_OBJECT}
			@code{cachedType=method.returnType.simpleName}
		    // This cast is cleary flawed\n
		    def ret = (@{method.returnType.simpleName}) InternalHelper.wrapObject(@includeNamed{'invokeDelegate';method=method});\n
		@else{method.returnType.kind == CLASS_JSON_OBJECT}
			@code{cachedType='Map<String, Object>'}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.getMap();\n
		@else{method.returnType.kind == CLASS_JSON_ARRAY}
			@code{cachedType='List<Object>'}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.getList();\n
		@else{method.returnType.kind == CLASS_LIST}
			@code{cachedType=method.returnType.name}
			@if{method.returnType.args[0].kind == CLASS_JSON_OBJECT}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collect({underpants -> underpants.getMap()});\n
			@else{method.returnType.args[0].kind == CLASS_JSON_ARRAY}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collect({underpants -> underpants.getList()});\n
			@else{method.returnType.args[0].kind == CLASS_API}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collect({underpants -> @{method.returnType.args[0].simpleName}.FACTORY.apply(underpants)});\n
		  @else{}
		    def ret = @includeNamed{'invokeDelegate';method=method};\n
			@end{}
		@else{method.returnType.kind == CLASS_SET}
			@code{cachedType=method.returnType.name}
			@if{method.returnType.args[0].kind == CLASS_JSON_OBJECT}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collect({underpants -> underpants.getMap()}) as Set;\n
			@else{method.returnType.args[0].kind == CLASS_JSON_ARRAY}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collect({underpants -> underpants.getList()}) as Set;\n
			@else{method.returnType.args[0].kind == CLASS_API}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collect({underpants -> @{method.returnType.args[0].simpleName}.FACTORY.apply(underpants)}) as Set;\n
			@else{}
		    def ret = @includeNamed{'invokeDelegate';method=method};\n
			@end{}
		@else{method.returnType.kind == CLASS_MAP}
			@code{cachedType=method.returnType.name}
			@if{method.returnType.args[1].kind == CLASS_JSON_OBJECT}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collectEntries({k, v -> [k, v.getMap()]});\n
			@else{method.returnType.args[1].kind == CLASS_JSON_ARRAY}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collectEntries({k, v -> [k, v.getList()]});\n
			@else{method.returnType.args[1].kind == CLASS_API}
		    def ret = @includeNamed{'invokeDelegate';method=method}?.collectEntries({k, v -> [k, @{method.returnType.args[0].simpleName}.FACTORY.apply(v)]});\n
			@else{}
		    def ret = @includeNamed{'invokeDelegate';method=method};\n
			@end{}
		@else{method.returnType.kind == CLASS_ENUM}
			@code{cachedType=method.returnType.name}
		    def ret = @includeNamed{'invokeDelegate';method=method};\n
		@else{method.returnType.kind == CLASS_API}
			@code{cachedType=method.returnType.simpleName}
		    def ret= @{method.returnType.raw.simpleName}.FACTORY.apply(@includeNamed{'invokeDelegate';method=method});\n
		@else{}
			@code{cachedType=method.returnType.name}
		    def ret = @includeNamed{'invokeDelegate';method=method};\n
		@end{}
		@if{method.cacheReturn}
		    cached_@{cacheDecls.size()} = ret;\n
			@code{cacheDecls.add('private' + (method.staticMethod ? ' static' : '') + ' ' + cachedType + ' cached_' + cacheDecls.size())}
		@end{}
		    return ret;\n
		@end{}
	  }\n
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
