	  private final def @{type.raw} delegate;\n
	  public @{constructor}(Object delegate) {\n
	@if{concrete && concreteSuperType != null}
	    super((@{type.raw}) delegate);\n
	@end{}
	    this.delegate = (@{type.raw}) delegate;\n
	  }\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n

	@foreach{method:methods}
	@if{method.doc != null}
	  /**\n
	@{renderDocToHtml("   *", method.doc, renderLinkToHtml)}
	@foreach{param: method.params}
	   * @param @{param.name} @if{param.description != null}@{renderTokensToHtml("", param.description.tokens, renderLinkToHtml, "")}@end{}@if{param.type.kind == CLASS_DATA_OBJECT} (see @{renderDataObjectHtmlLink(param.type)})@end{}\n
	@end{}
	@if{!method.returnType.name.equals("void")}
	   * @return @if{method.returnDescription != null}@{renderTokensToHtml("", method.returnDescription.tokens, renderLinkToHtml, "")}@end{}@if{method.returnType.kind == CLASS_DATA_OBJECT} (see @{renderDataObjectHtmlLink(method.returnType)})@end{}\n
	@end{}
	   */\n
	@end{}
	  public @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeParam:method.typeParams}@{typeParam.name}@end{', '}> @end{}@{genConvReturnType(method.returnType, false)} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param;defaultDataObject=defaultDataObjectMap[method]}@end{', '}) {\n
	@if{method.fluent}
	    @{genInvokeDelegate(method)};\n
			@if{method.returnType.variable}
	    return (@{method.returnType.name}) this;\n
			@else{}
	    return this;\n
			@end{}
	@else{method.returnType.name.equals('void')}
	    @{genInvokeDelegate(method)};\n
	@else{}
		@if{method.cacheReturn}
		    if (cached_@{cacheDecls.size()} != null) {\n
		      return cached_@{cacheDecls.size()};\n
		    }\n
		@end{}
		    def ret = @{genConvReturn(method.returnType, genInvokeDelegate(method))};\n
		@if{method.cacheReturn}
		    cached_@{cacheDecls.size()} = ret;\n
			@code{cacheDecls.add('private' + (method.staticMethod ? ' static' : '') + ' ' + genConvReturnType(method.returnType, true) + ' cached_' + cacheDecls.size())}
		@end{}
		    return ret;\n
		@end{}
	  }\n
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
