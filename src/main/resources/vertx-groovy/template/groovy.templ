@comment{"This is where the generation starts"}
@comment{"==================================="}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{helper.getPackageName(ifaceFQCN.replace("io.vertx.core", "io.vertx.groovy.core"))};\n

import groovy.transform.CompileStatic\n
@comment{"Generate the imports"}
@foreach{importedType:importedTypes}
	@if{importedType.kind.name() == "GEN"}
	import @{importedType.toString().replace("io.vertx.core", "io.vertx.groovy.core")}\n
	@else{}
	import @{importedType}\n
	@end{}
@end{}

@CompileStatic\n
public @if{concrete}class@else{}interface@end{} @{helper.getSimpleName(ifaceFQCN)}

@if{concrete}
	@if{superConcreteTypes.size() > 0}
	 extends
		@foreach{superType: superConcreteTypes}
		 @{superType.format(false)}
		@end{}
	@end{}
@end{}

@if{superAbstractTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{superAbstractType: superAbstractTypes}
	 @{superAbstractType.format(false)}
	@end{', '}
@end{} {\n

@if{concrete}

	  final def @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	  public @{ifaceSimpleName}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && superConcreteTypes.size() > 0}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	  }\n

	@foreach{method:methods}
	  public @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeVar:method.typeParams}@{typeVar}@end{}> @end{}@{method.returnType} @{method.name}(@foreach{param: method.params}@{param.type.format(false)} @{param.name}@end{', '}) {\n
	    throw new UnsupportedOperationException();\n
	  }\n
	@end{}

@end{}
}\n