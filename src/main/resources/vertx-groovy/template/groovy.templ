@includeNamed{"common.templ"}

@comment{"This is where the generation starts"}
@comment{"==================================="}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{type.raw.translatePackageName("groovy")};\n

@comment{'the current index of the cache'}
@code{cacheDecls=new java.util.ArrayList()}

@code{
  function genParamDecl(type) {
    if (type.kind == CLASS_DATA_OBJECT || type.kind == CLASS_JSON_OBJECT) {
      return 'Map<String, Object>';
    } else if (type.kind == CLASS_JSON_ARRAY) {
      return 'List<Object>';
    } else if (type.kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      if (eventType.kind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        return 'Handler<AsyncResult<' + genParamDecl(resultType) + '>>';
      } else {
        return 'Handler<' + genParamDecl(eventType) + '>';
      }
    } else if (type.kind == CLASS_LIST) {
      return 'List<' + genParamDecl(type.args[0]) + '>';
    } else if (type.kind == CLASS_SET) {
      return 'Set<' + genParamDecl(type.args[0]) + '>';
    } else if (type.kind == CLASS_MAP) {
      return 'Map<String, ' + genParamDecl(type.args[1]) + '>';
    } else {
      return type.simpleName;
    }
  }
}

@declare{'paramTemplate'}
	@if{param.type.kind == CLASS_DATA_OBJECT}
		Map<String, Object> @{param.name}@if{defaultDataObject} = [:]@end{}
	@else{}
		@{genParamDecl(param.type)} @{param.name}
	@end{}
@end{}

import groovy.transform.CompileStatic\n
import io.vertx.lang.groovy.InternalHelper\n
import io.vertx.core.json.JsonObject\n
@comment{"Generate the imports"}
@foreach{importedType:importedTypes}
	@if{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.raw.translateName("groovy")}\n
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
			import @{importedType}\n
		@end{}
	@end{}
@end{}

@if{doc != null}
/**\n
@{renderDocToHtml(" *", doc, renderLinkToHtml)}
*/\n
@end{}
@CompileStatic\n
public @if{concrete}class@else{}interface@end{} @{helper.getSimpleName(ifaceFQCN)}

@if{concrete}
	@if{concreteSuperType != null}
	 extends @{concreteSuperType.simpleName}
	@end{}
@end{}

@if{abstractSuperTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{abstractSuperType: abstractSuperTypes}
	 @{abstractSuperType.simpleName}
	@end{', '}
@end{}

@if{handlerSuperType != null}
	@if{abstractSuperTypes.empty}
		 @if{concrete}implements @else{}extends @end{}
	@else{}, @end{}
	Handler<@{type.handlerArg.simpleName}>
@end{} {\n

@comment{'Compute the defaultDataObject map that store if we need a default data object value or not per method'}
@code{defaultDataObjectMap=new java.util.IdentityHashMap()}
@foreach{method:methods}
	@code{defaultDataObject=false}
	@if{method.params.size() > 0 && method.params[0].type.kind == CLASS_DATA_OBJECT}
		@code{defaultDataObject=true}
		@foreach{m:methods}
			@if{m.name == method.name && m.params == method.params.subList(1, method.params.size())}
				@code{defaultDataObject=false}
			@end{}
		@end{}
	@end{}
	@code{defaultDataObjectMap.put(method, defaultDataObject)}
@end{}

@if{concrete}

@includeNamed{'classbody.templ';constructor=ifaceSimpleName}

@else{}

	  public Object getDelegate();\n

	@foreach{method:methods}
	  @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeVar:method.typeParams}@{typeVar}@end{}> @end{}@{method.returnType.simpleName} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param;defaultDataObject=defaultDataObjectMap[method]}@end{', '});\n
	@end{}

@end{}

}\n

@if{!concrete}
\n
@CompileStatic\n
class @{type.raw.simpleName}Impl@if{typeParams.size() > 0}<@foreach{typeParam:typeParams}@{typeParam.name}@end{','}>@end{} implements @{helper.getSimpleName(ifaceFQCN)} {\n
@includeNamed{'classbody.templ';constructor=(type.raw.simpleName + 'Impl')}
}\n
@end{}
